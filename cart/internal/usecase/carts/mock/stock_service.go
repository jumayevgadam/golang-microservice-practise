// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

import (
	"cart/internal/domain"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockServiceMock implements mm_carts.StockService
type StockServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetStockItemBySKU          func(ctx context.Context, skuID domain.SkuID) (s1 domain.StockItemBySKU, err error)
	funcGetStockItemBySKUOrigin    string
	inspectFuncGetStockItemBySKU   func(ctx context.Context, skuID domain.SkuID)
	afterGetStockItemBySKUCounter  uint64
	beforeGetStockItemBySKUCounter uint64
	GetStockItemBySKUMock          mStockServiceMockGetStockItemBySKU
}

// NewStockServiceMock returns a mock for mm_carts.StockService
func NewStockServiceMock(t minimock.Tester) *StockServiceMock {
	m := &StockServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetStockItemBySKUMock = mStockServiceMockGetStockItemBySKU{mock: m}
	m.GetStockItemBySKUMock.callArgs = []*StockServiceMockGetStockItemBySKUParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockServiceMockGetStockItemBySKU struct {
	optional           bool
	mock               *StockServiceMock
	defaultExpectation *StockServiceMockGetStockItemBySKUExpectation
	expectations       []*StockServiceMockGetStockItemBySKUExpectation

	callArgs []*StockServiceMockGetStockItemBySKUParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// StockServiceMockGetStockItemBySKUExpectation specifies expectation struct of the StockService.GetStockItemBySKU
type StockServiceMockGetStockItemBySKUExpectation struct {
	mock               *StockServiceMock
	params             *StockServiceMockGetStockItemBySKUParams
	paramPtrs          *StockServiceMockGetStockItemBySKUParamPtrs
	expectationOrigins StockServiceMockGetStockItemBySKUExpectationOrigins
	results            *StockServiceMockGetStockItemBySKUResults
	returnOrigin       string
	Counter            uint64
}

// StockServiceMockGetStockItemBySKUParams contains parameters of the StockService.GetStockItemBySKU
type StockServiceMockGetStockItemBySKUParams struct {
	ctx   context.Context
	skuID domain.SkuID
}

// StockServiceMockGetStockItemBySKUParamPtrs contains pointers to parameters of the StockService.GetStockItemBySKU
type StockServiceMockGetStockItemBySKUParamPtrs struct {
	ctx   *context.Context
	skuID *domain.SkuID
}

// StockServiceMockGetStockItemBySKUResults contains results of the StockService.GetStockItemBySKU
type StockServiceMockGetStockItemBySKUResults struct {
	s1  domain.StockItemBySKU
	err error
}

// StockServiceMockGetStockItemBySKUOrigins contains origins of expectations of the StockService.GetStockItemBySKU
type StockServiceMockGetStockItemBySKUExpectationOrigins struct {
	origin      string
	originCtx   string
	originSkuID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Optional() *mStockServiceMockGetStockItemBySKU {
	mmGetStockItemBySKU.optional = true
	return mmGetStockItemBySKU
}

// Expect sets up expected params for StockService.GetStockItemBySKU
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Expect(ctx context.Context, skuID domain.SkuID) *mStockServiceMockGetStockItemBySKU {
	if mmGetStockItemBySKU.mock.funcGetStockItemBySKU != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Set")
	}

	if mmGetStockItemBySKU.defaultExpectation == nil {
		mmGetStockItemBySKU.defaultExpectation = &StockServiceMockGetStockItemBySKUExpectation{}
	}

	if mmGetStockItemBySKU.defaultExpectation.paramPtrs != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by ExpectParams functions")
	}

	mmGetStockItemBySKU.defaultExpectation.params = &StockServiceMockGetStockItemBySKUParams{ctx, skuID}
	mmGetStockItemBySKU.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetStockItemBySKU.expectations {
		if minimock.Equal(e.params, mmGetStockItemBySKU.defaultExpectation.params) {
			mmGetStockItemBySKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockItemBySKU.defaultExpectation.params)
		}
	}

	return mmGetStockItemBySKU
}

// ExpectCtxParam1 sets up expected param ctx for StockService.GetStockItemBySKU
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) ExpectCtxParam1(ctx context.Context) *mStockServiceMockGetStockItemBySKU {
	if mmGetStockItemBySKU.mock.funcGetStockItemBySKU != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Set")
	}

	if mmGetStockItemBySKU.defaultExpectation == nil {
		mmGetStockItemBySKU.defaultExpectation = &StockServiceMockGetStockItemBySKUExpectation{}
	}

	if mmGetStockItemBySKU.defaultExpectation.params != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Expect")
	}

	if mmGetStockItemBySKU.defaultExpectation.paramPtrs == nil {
		mmGetStockItemBySKU.defaultExpectation.paramPtrs = &StockServiceMockGetStockItemBySKUParamPtrs{}
	}
	mmGetStockItemBySKU.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetStockItemBySKU.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetStockItemBySKU
}

// ExpectSkuIDParam2 sets up expected param skuID for StockService.GetStockItemBySKU
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) ExpectSkuIDParam2(skuID domain.SkuID) *mStockServiceMockGetStockItemBySKU {
	if mmGetStockItemBySKU.mock.funcGetStockItemBySKU != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Set")
	}

	if mmGetStockItemBySKU.defaultExpectation == nil {
		mmGetStockItemBySKU.defaultExpectation = &StockServiceMockGetStockItemBySKUExpectation{}
	}

	if mmGetStockItemBySKU.defaultExpectation.params != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Expect")
	}

	if mmGetStockItemBySKU.defaultExpectation.paramPtrs == nil {
		mmGetStockItemBySKU.defaultExpectation.paramPtrs = &StockServiceMockGetStockItemBySKUParamPtrs{}
	}
	mmGetStockItemBySKU.defaultExpectation.paramPtrs.skuID = &skuID
	mmGetStockItemBySKU.defaultExpectation.expectationOrigins.originSkuID = minimock.CallerInfo(1)

	return mmGetStockItemBySKU
}

// Inspect accepts an inspector function that has same arguments as the StockService.GetStockItemBySKU
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Inspect(f func(ctx context.Context, skuID domain.SkuID)) *mStockServiceMockGetStockItemBySKU {
	if mmGetStockItemBySKU.mock.inspectFuncGetStockItemBySKU != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("Inspect function is already set for StockServiceMock.GetStockItemBySKU")
	}

	mmGetStockItemBySKU.mock.inspectFuncGetStockItemBySKU = f

	return mmGetStockItemBySKU
}

// Return sets up results that will be returned by StockService.GetStockItemBySKU
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Return(s1 domain.StockItemBySKU, err error) *StockServiceMock {
	if mmGetStockItemBySKU.mock.funcGetStockItemBySKU != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Set")
	}

	if mmGetStockItemBySKU.defaultExpectation == nil {
		mmGetStockItemBySKU.defaultExpectation = &StockServiceMockGetStockItemBySKUExpectation{mock: mmGetStockItemBySKU.mock}
	}
	mmGetStockItemBySKU.defaultExpectation.results = &StockServiceMockGetStockItemBySKUResults{s1, err}
	mmGetStockItemBySKU.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetStockItemBySKU.mock
}

// Set uses given function f to mock the StockService.GetStockItemBySKU method
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Set(f func(ctx context.Context, skuID domain.SkuID) (s1 domain.StockItemBySKU, err error)) *StockServiceMock {
	if mmGetStockItemBySKU.defaultExpectation != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("Default expectation is already set for the StockService.GetStockItemBySKU method")
	}

	if len(mmGetStockItemBySKU.expectations) > 0 {
		mmGetStockItemBySKU.mock.t.Fatalf("Some expectations are already set for the StockService.GetStockItemBySKU method")
	}

	mmGetStockItemBySKU.mock.funcGetStockItemBySKU = f
	mmGetStockItemBySKU.mock.funcGetStockItemBySKUOrigin = minimock.CallerInfo(1)
	return mmGetStockItemBySKU.mock
}

// When sets expectation for the StockService.GetStockItemBySKU which will trigger the result defined by the following
// Then helper
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) When(ctx context.Context, skuID domain.SkuID) *StockServiceMockGetStockItemBySKUExpectation {
	if mmGetStockItemBySKU.mock.funcGetStockItemBySKU != nil {
		mmGetStockItemBySKU.mock.t.Fatalf("StockServiceMock.GetStockItemBySKU mock is already set by Set")
	}

	expectation := &StockServiceMockGetStockItemBySKUExpectation{
		mock:               mmGetStockItemBySKU.mock,
		params:             &StockServiceMockGetStockItemBySKUParams{ctx, skuID},
		expectationOrigins: StockServiceMockGetStockItemBySKUExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetStockItemBySKU.expectations = append(mmGetStockItemBySKU.expectations, expectation)
	return expectation
}

// Then sets up StockService.GetStockItemBySKU return parameters for the expectation previously defined by the When method
func (e *StockServiceMockGetStockItemBySKUExpectation) Then(s1 domain.StockItemBySKU, err error) *StockServiceMock {
	e.results = &StockServiceMockGetStockItemBySKUResults{s1, err}
	return e.mock
}

// Times sets number of times StockService.GetStockItemBySKU should be invoked
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Times(n uint64) *mStockServiceMockGetStockItemBySKU {
	if n == 0 {
		mmGetStockItemBySKU.mock.t.Fatalf("Times of StockServiceMock.GetStockItemBySKU mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockItemBySKU.expectedInvocations, n)
	mmGetStockItemBySKU.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetStockItemBySKU
}

func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) invocationsDone() bool {
	if len(mmGetStockItemBySKU.expectations) == 0 && mmGetStockItemBySKU.defaultExpectation == nil && mmGetStockItemBySKU.mock.funcGetStockItemBySKU == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockItemBySKU.mock.afterGetStockItemBySKUCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockItemBySKU.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockItemBySKU implements mm_carts.StockService
func (mmGetStockItemBySKU *StockServiceMock) GetStockItemBySKU(ctx context.Context, skuID domain.SkuID) (s1 domain.StockItemBySKU, err error) {
	mm_atomic.AddUint64(&mmGetStockItemBySKU.beforeGetStockItemBySKUCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockItemBySKU.afterGetStockItemBySKUCounter, 1)

	mmGetStockItemBySKU.t.Helper()

	if mmGetStockItemBySKU.inspectFuncGetStockItemBySKU != nil {
		mmGetStockItemBySKU.inspectFuncGetStockItemBySKU(ctx, skuID)
	}

	mm_params := StockServiceMockGetStockItemBySKUParams{ctx, skuID}

	// Record call args
	mmGetStockItemBySKU.GetStockItemBySKUMock.mutex.Lock()
	mmGetStockItemBySKU.GetStockItemBySKUMock.callArgs = append(mmGetStockItemBySKU.GetStockItemBySKUMock.callArgs, &mm_params)
	mmGetStockItemBySKU.GetStockItemBySKUMock.mutex.Unlock()

	for _, e := range mmGetStockItemBySKU.GetStockItemBySKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.paramPtrs

		mm_got := StockServiceMockGetStockItemBySKUParams{ctx, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockItemBySKU.t.Errorf("StockServiceMock.GetStockItemBySKU got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmGetStockItemBySKU.t.Errorf("StockServiceMock.GetStockItemBySKU got unexpected parameter skuID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.expectationOrigins.originSkuID, *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockItemBySKU.t.Errorf("StockServiceMock.GetStockItemBySKU got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockItemBySKU.GetStockItemBySKUMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockItemBySKU.t.Fatal("No results are set for the StockServiceMock.GetStockItemBySKU")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetStockItemBySKU.funcGetStockItemBySKU != nil {
		return mmGetStockItemBySKU.funcGetStockItemBySKU(ctx, skuID)
	}
	mmGetStockItemBySKU.t.Fatalf("Unexpected call to StockServiceMock.GetStockItemBySKU. %v %v", ctx, skuID)
	return
}

// GetStockItemBySKUAfterCounter returns a count of finished StockServiceMock.GetStockItemBySKU invocations
func (mmGetStockItemBySKU *StockServiceMock) GetStockItemBySKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockItemBySKU.afterGetStockItemBySKUCounter)
}

// GetStockItemBySKUBeforeCounter returns a count of StockServiceMock.GetStockItemBySKU invocations
func (mmGetStockItemBySKU *StockServiceMock) GetStockItemBySKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockItemBySKU.beforeGetStockItemBySKUCounter)
}

// Calls returns a list of arguments used in each call to StockServiceMock.GetStockItemBySKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockItemBySKU *mStockServiceMockGetStockItemBySKU) Calls() []*StockServiceMockGetStockItemBySKUParams {
	mmGetStockItemBySKU.mutex.RLock()

	argCopy := make([]*StockServiceMockGetStockItemBySKUParams, len(mmGetStockItemBySKU.callArgs))
	copy(argCopy, mmGetStockItemBySKU.callArgs)

	mmGetStockItemBySKU.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockItemBySKUDone returns true if the count of the GetStockItemBySKU invocations corresponds
// the number of defined expectations
func (m *StockServiceMock) MinimockGetStockItemBySKUDone() bool {
	if m.GetStockItemBySKUMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockItemBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockItemBySKUMock.invocationsDone()
}

// MinimockGetStockItemBySKUInspect logs each unmet expectation
func (m *StockServiceMock) MinimockGetStockItemBySKUInspect() {
	for _, e := range m.GetStockItemBySKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockServiceMock.GetStockItemBySKU at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetStockItemBySKUCounter := mm_atomic.LoadUint64(&m.afterGetStockItemBySKUCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockItemBySKUMock.defaultExpectation != nil && afterGetStockItemBySKUCounter < 1 {
		if m.GetStockItemBySKUMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to StockServiceMock.GetStockItemBySKU at\n%s", m.GetStockItemBySKUMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to StockServiceMock.GetStockItemBySKU at\n%s with params: %#v", m.GetStockItemBySKUMock.defaultExpectation.expectationOrigins.origin, *m.GetStockItemBySKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockItemBySKU != nil && afterGetStockItemBySKUCounter < 1 {
		m.t.Errorf("Expected call to StockServiceMock.GetStockItemBySKU at\n%s", m.funcGetStockItemBySKUOrigin)
	}

	if !m.GetStockItemBySKUMock.invocationsDone() && afterGetStockItemBySKUCounter > 0 {
		m.t.Errorf("Expected %d calls to StockServiceMock.GetStockItemBySKU at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockItemBySKUMock.expectedInvocations), m.GetStockItemBySKUMock.expectedInvocationsOrigin, afterGetStockItemBySKUCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetStockItemBySKUInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetStockItemBySKUDone()
}
