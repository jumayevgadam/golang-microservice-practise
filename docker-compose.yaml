services:
  cart_db:
    image: postgres:17.5-alpine3.21
    container_name: cart_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: cart_service_db 
    volumes:
      - cart_db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5435:5432"
    restart: always
    networks:
      - go-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cart_service_db"]
      interval: 5s
      timeout: 5s
      retries: 3

  stocks_db:
    image: postgres:17.5-alpine3.21
    container_name: stocks_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: stocks_service_db
    volumes:
      - stocks_db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5434:5432"
    restart: always
    networks:
      - go-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d stocks_service_db"]
      interval: 5s
      timeout: 5s
      retries: 3

  stocks_migrator:
    image: kukymbr/goose-docker:latest
    container_name: stocks_migrator
    working_dir: /migrations
    volumes:
      - ./stocks/internal/migrations:/migrations
    depends_on:
      stocks_db:
        condition: service_healthy
    networks:
      - go-net
    command: >
      sh -c "
      goose -dir=/migrations postgres 
      'host=stocks_db user=postgres password=12345 dbname=stocks_service_db sslmode=disable' up"

  cart_service:
    build:
      context: ./cart
      dockerfile: Dockerfile
    container_name: cart_service_backend
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      cart_db:
        condition: service_healthy
      stocks_service:
        condition: service_started
      #cart_migrator:
       # condition: service_completed_successfully
    env_file:
      - cart/.env
    networks:
      - go-net
    restart: unless-stopped
  
  stocks_service:
    build:
      context: ./stocks
      dockerfile: Dockerfile
    container_name: stocks_service_backend
    ports:
      - "127.0.0.1:8081:8081"
    depends_on:
      stocks_db:
        condition: service_healthy
    env_file:
      - stocks/.env
    networks:
      - go-net
    restart: unless-stopped

 
networks:
  go-net:
    driver: bridge

volumes:
  cart_db_data:
  stocks_db_data: