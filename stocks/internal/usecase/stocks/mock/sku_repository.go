// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

import (
	"context"
	"stocks/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// SKURepositoryMock implements mm_stocks.SKURepository
type SKURepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetSKUByID          func(ctx context.Context, skuID domain.SKUID) (s1 domain.SKU, err error)
	funcGetSKUByIDOrigin    string
	inspectFuncGetSKUByID   func(ctx context.Context, skuID domain.SKUID)
	afterGetSKUByIDCounter  uint64
	beforeGetSKUByIDCounter uint64
	GetSKUByIDMock          mSKURepositoryMockGetSKUByID
}

// NewSKURepositoryMock returns a mock for mm_stocks.SKURepository
func NewSKURepositoryMock(t minimock.Tester) *SKURepositoryMock {
	m := &SKURepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetSKUByIDMock = mSKURepositoryMockGetSKUByID{mock: m}
	m.GetSKUByIDMock.callArgs = []*SKURepositoryMockGetSKUByIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mSKURepositoryMockGetSKUByID struct {
	optional           bool
	mock               *SKURepositoryMock
	defaultExpectation *SKURepositoryMockGetSKUByIDExpectation
	expectations       []*SKURepositoryMockGetSKUByIDExpectation

	callArgs []*SKURepositoryMockGetSKUByIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// SKURepositoryMockGetSKUByIDExpectation specifies expectation struct of the SKURepository.GetSKUByID
type SKURepositoryMockGetSKUByIDExpectation struct {
	mock               *SKURepositoryMock
	params             *SKURepositoryMockGetSKUByIDParams
	paramPtrs          *SKURepositoryMockGetSKUByIDParamPtrs
	expectationOrigins SKURepositoryMockGetSKUByIDExpectationOrigins
	results            *SKURepositoryMockGetSKUByIDResults
	returnOrigin       string
	Counter            uint64
}

// SKURepositoryMockGetSKUByIDParams contains parameters of the SKURepository.GetSKUByID
type SKURepositoryMockGetSKUByIDParams struct {
	ctx   context.Context
	skuID domain.SKUID
}

// SKURepositoryMockGetSKUByIDParamPtrs contains pointers to parameters of the SKURepository.GetSKUByID
type SKURepositoryMockGetSKUByIDParamPtrs struct {
	ctx   *context.Context
	skuID *domain.SKUID
}

// SKURepositoryMockGetSKUByIDResults contains results of the SKURepository.GetSKUByID
type SKURepositoryMockGetSKUByIDResults struct {
	s1  domain.SKU
	err error
}

// SKURepositoryMockGetSKUByIDOrigins contains origins of expectations of the SKURepository.GetSKUByID
type SKURepositoryMockGetSKUByIDExpectationOrigins struct {
	origin      string
	originCtx   string
	originSkuID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Optional() *mSKURepositoryMockGetSKUByID {
	mmGetSKUByID.optional = true
	return mmGetSKUByID
}

// Expect sets up expected params for SKURepository.GetSKUByID
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Expect(ctx context.Context, skuID domain.SKUID) *mSKURepositoryMockGetSKUByID {
	if mmGetSKUByID.mock.funcGetSKUByID != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Set")
	}

	if mmGetSKUByID.defaultExpectation == nil {
		mmGetSKUByID.defaultExpectation = &SKURepositoryMockGetSKUByIDExpectation{}
	}

	if mmGetSKUByID.defaultExpectation.paramPtrs != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by ExpectParams functions")
	}

	mmGetSKUByID.defaultExpectation.params = &SKURepositoryMockGetSKUByIDParams{ctx, skuID}
	mmGetSKUByID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetSKUByID.expectations {
		if minimock.Equal(e.params, mmGetSKUByID.defaultExpectation.params) {
			mmGetSKUByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSKUByID.defaultExpectation.params)
		}
	}

	return mmGetSKUByID
}

// ExpectCtxParam1 sets up expected param ctx for SKURepository.GetSKUByID
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) ExpectCtxParam1(ctx context.Context) *mSKURepositoryMockGetSKUByID {
	if mmGetSKUByID.mock.funcGetSKUByID != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Set")
	}

	if mmGetSKUByID.defaultExpectation == nil {
		mmGetSKUByID.defaultExpectation = &SKURepositoryMockGetSKUByIDExpectation{}
	}

	if mmGetSKUByID.defaultExpectation.params != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Expect")
	}

	if mmGetSKUByID.defaultExpectation.paramPtrs == nil {
		mmGetSKUByID.defaultExpectation.paramPtrs = &SKURepositoryMockGetSKUByIDParamPtrs{}
	}
	mmGetSKUByID.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetSKUByID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetSKUByID
}

// ExpectSkuIDParam2 sets up expected param skuID for SKURepository.GetSKUByID
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) ExpectSkuIDParam2(skuID domain.SKUID) *mSKURepositoryMockGetSKUByID {
	if mmGetSKUByID.mock.funcGetSKUByID != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Set")
	}

	if mmGetSKUByID.defaultExpectation == nil {
		mmGetSKUByID.defaultExpectation = &SKURepositoryMockGetSKUByIDExpectation{}
	}

	if mmGetSKUByID.defaultExpectation.params != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Expect")
	}

	if mmGetSKUByID.defaultExpectation.paramPtrs == nil {
		mmGetSKUByID.defaultExpectation.paramPtrs = &SKURepositoryMockGetSKUByIDParamPtrs{}
	}
	mmGetSKUByID.defaultExpectation.paramPtrs.skuID = &skuID
	mmGetSKUByID.defaultExpectation.expectationOrigins.originSkuID = minimock.CallerInfo(1)

	return mmGetSKUByID
}

// Inspect accepts an inspector function that has same arguments as the SKURepository.GetSKUByID
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Inspect(f func(ctx context.Context, skuID domain.SKUID)) *mSKURepositoryMockGetSKUByID {
	if mmGetSKUByID.mock.inspectFuncGetSKUByID != nil {
		mmGetSKUByID.mock.t.Fatalf("Inspect function is already set for SKURepositoryMock.GetSKUByID")
	}

	mmGetSKUByID.mock.inspectFuncGetSKUByID = f

	return mmGetSKUByID
}

// Return sets up results that will be returned by SKURepository.GetSKUByID
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Return(s1 domain.SKU, err error) *SKURepositoryMock {
	if mmGetSKUByID.mock.funcGetSKUByID != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Set")
	}

	if mmGetSKUByID.defaultExpectation == nil {
		mmGetSKUByID.defaultExpectation = &SKURepositoryMockGetSKUByIDExpectation{mock: mmGetSKUByID.mock}
	}
	mmGetSKUByID.defaultExpectation.results = &SKURepositoryMockGetSKUByIDResults{s1, err}
	mmGetSKUByID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetSKUByID.mock
}

// Set uses given function f to mock the SKURepository.GetSKUByID method
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Set(f func(ctx context.Context, skuID domain.SKUID) (s1 domain.SKU, err error)) *SKURepositoryMock {
	if mmGetSKUByID.defaultExpectation != nil {
		mmGetSKUByID.mock.t.Fatalf("Default expectation is already set for the SKURepository.GetSKUByID method")
	}

	if len(mmGetSKUByID.expectations) > 0 {
		mmGetSKUByID.mock.t.Fatalf("Some expectations are already set for the SKURepository.GetSKUByID method")
	}

	mmGetSKUByID.mock.funcGetSKUByID = f
	mmGetSKUByID.mock.funcGetSKUByIDOrigin = minimock.CallerInfo(1)
	return mmGetSKUByID.mock
}

// When sets expectation for the SKURepository.GetSKUByID which will trigger the result defined by the following
// Then helper
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) When(ctx context.Context, skuID domain.SKUID) *SKURepositoryMockGetSKUByIDExpectation {
	if mmGetSKUByID.mock.funcGetSKUByID != nil {
		mmGetSKUByID.mock.t.Fatalf("SKURepositoryMock.GetSKUByID mock is already set by Set")
	}

	expectation := &SKURepositoryMockGetSKUByIDExpectation{
		mock:               mmGetSKUByID.mock,
		params:             &SKURepositoryMockGetSKUByIDParams{ctx, skuID},
		expectationOrigins: SKURepositoryMockGetSKUByIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetSKUByID.expectations = append(mmGetSKUByID.expectations, expectation)
	return expectation
}

// Then sets up SKURepository.GetSKUByID return parameters for the expectation previously defined by the When method
func (e *SKURepositoryMockGetSKUByIDExpectation) Then(s1 domain.SKU, err error) *SKURepositoryMock {
	e.results = &SKURepositoryMockGetSKUByIDResults{s1, err}
	return e.mock
}

// Times sets number of times SKURepository.GetSKUByID should be invoked
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Times(n uint64) *mSKURepositoryMockGetSKUByID {
	if n == 0 {
		mmGetSKUByID.mock.t.Fatalf("Times of SKURepositoryMock.GetSKUByID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetSKUByID.expectedInvocations, n)
	mmGetSKUByID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetSKUByID
}

func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) invocationsDone() bool {
	if len(mmGetSKUByID.expectations) == 0 && mmGetSKUByID.defaultExpectation == nil && mmGetSKUByID.mock.funcGetSKUByID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetSKUByID.mock.afterGetSKUByIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetSKUByID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetSKUByID implements mm_stocks.SKURepository
func (mmGetSKUByID *SKURepositoryMock) GetSKUByID(ctx context.Context, skuID domain.SKUID) (s1 domain.SKU, err error) {
	mm_atomic.AddUint64(&mmGetSKUByID.beforeGetSKUByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSKUByID.afterGetSKUByIDCounter, 1)

	mmGetSKUByID.t.Helper()

	if mmGetSKUByID.inspectFuncGetSKUByID != nil {
		mmGetSKUByID.inspectFuncGetSKUByID(ctx, skuID)
	}

	mm_params := SKURepositoryMockGetSKUByIDParams{ctx, skuID}

	// Record call args
	mmGetSKUByID.GetSKUByIDMock.mutex.Lock()
	mmGetSKUByID.GetSKUByIDMock.callArgs = append(mmGetSKUByID.GetSKUByIDMock.callArgs, &mm_params)
	mmGetSKUByID.GetSKUByIDMock.mutex.Unlock()

	for _, e := range mmGetSKUByID.GetSKUByIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetSKUByID.GetSKUByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSKUByID.GetSKUByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSKUByID.GetSKUByIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetSKUByID.GetSKUByIDMock.defaultExpectation.paramPtrs

		mm_got := SKURepositoryMockGetSKUByIDParams{ctx, skuID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetSKUByID.t.Errorf("SKURepositoryMock.GetSKUByID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetSKUByID.GetSKUByIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.skuID != nil && !minimock.Equal(*mm_want_ptrs.skuID, mm_got.skuID) {
				mmGetSKUByID.t.Errorf("SKURepositoryMock.GetSKUByID got unexpected parameter skuID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetSKUByID.GetSKUByIDMock.defaultExpectation.expectationOrigins.originSkuID, *mm_want_ptrs.skuID, mm_got.skuID, minimock.Diff(*mm_want_ptrs.skuID, mm_got.skuID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSKUByID.t.Errorf("SKURepositoryMock.GetSKUByID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetSKUByID.GetSKUByIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSKUByID.GetSKUByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSKUByID.t.Fatal("No results are set for the SKURepositoryMock.GetSKUByID")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetSKUByID.funcGetSKUByID != nil {
		return mmGetSKUByID.funcGetSKUByID(ctx, skuID)
	}
	mmGetSKUByID.t.Fatalf("Unexpected call to SKURepositoryMock.GetSKUByID. %v %v", ctx, skuID)
	return
}

// GetSKUByIDAfterCounter returns a count of finished SKURepositoryMock.GetSKUByID invocations
func (mmGetSKUByID *SKURepositoryMock) GetSKUByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSKUByID.afterGetSKUByIDCounter)
}

// GetSKUByIDBeforeCounter returns a count of SKURepositoryMock.GetSKUByID invocations
func (mmGetSKUByID *SKURepositoryMock) GetSKUByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSKUByID.beforeGetSKUByIDCounter)
}

// Calls returns a list of arguments used in each call to SKURepositoryMock.GetSKUByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSKUByID *mSKURepositoryMockGetSKUByID) Calls() []*SKURepositoryMockGetSKUByIDParams {
	mmGetSKUByID.mutex.RLock()

	argCopy := make([]*SKURepositoryMockGetSKUByIDParams, len(mmGetSKUByID.callArgs))
	copy(argCopy, mmGetSKUByID.callArgs)

	mmGetSKUByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetSKUByIDDone returns true if the count of the GetSKUByID invocations corresponds
// the number of defined expectations
func (m *SKURepositoryMock) MinimockGetSKUByIDDone() bool {
	if m.GetSKUByIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetSKUByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetSKUByIDMock.invocationsDone()
}

// MinimockGetSKUByIDInspect logs each unmet expectation
func (m *SKURepositoryMock) MinimockGetSKUByIDInspect() {
	for _, e := range m.GetSKUByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SKURepositoryMock.GetSKUByID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetSKUByIDCounter := mm_atomic.LoadUint64(&m.afterGetSKUByIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetSKUByIDMock.defaultExpectation != nil && afterGetSKUByIDCounter < 1 {
		if m.GetSKUByIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to SKURepositoryMock.GetSKUByID at\n%s", m.GetSKUByIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to SKURepositoryMock.GetSKUByID at\n%s with params: %#v", m.GetSKUByIDMock.defaultExpectation.expectationOrigins.origin, *m.GetSKUByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSKUByID != nil && afterGetSKUByIDCounter < 1 {
		m.t.Errorf("Expected call to SKURepositoryMock.GetSKUByID at\n%s", m.funcGetSKUByIDOrigin)
	}

	if !m.GetSKUByIDMock.invocationsDone() && afterGetSKUByIDCounter > 0 {
		m.t.Errorf("Expected %d calls to SKURepositoryMock.GetSKUByID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetSKUByIDMock.expectedInvocations), m.GetSKUByIDMock.expectedInvocationsOrigin, afterGetSKUByIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SKURepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetSKUByIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SKURepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SKURepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetSKUByIDDone()
}
