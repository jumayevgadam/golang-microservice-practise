// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: stocks.proto

package stocks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StocksService_AddStockItem_FullMethodName             = "/stocks.StocksService/AddStockItem"
	StocksService_DeleteStockItem_FullMethodName          = "/stocks.StocksService/DeleteStockItem"
	StocksService_GetStockItemBySKU_FullMethodName        = "/stocks.StocksService/GetStockItemBySKU"
	StocksService_ListStockItemsByLocation_FullMethodName = "/stocks.StocksService/ListStockItemsByLocation"
)

// StocksServiceClient is the client API for StocksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StocksServiceClient interface {
	AddStockItem(ctx context.Context, in *CreateStockItemRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	DeleteStockItem(ctx context.Context, in *DeleteStockItemRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetStockItemBySKU(ctx context.Context, in *GetStockItemRequest, opts ...grpc.CallOption) (*StockItemResponse, error)
	ListStockItemsByLocation(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListStockItemsResponse, error)
}

type stocksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStocksServiceClient(cc grpc.ClientConnInterface) StocksServiceClient {
	return &stocksServiceClient{cc}
}

func (c *stocksServiceClient) AddStockItem(ctx context.Context, in *CreateStockItemRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, StocksService_AddStockItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksServiceClient) DeleteStockItem(ctx context.Context, in *DeleteStockItemRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, StocksService_DeleteStockItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksServiceClient) GetStockItemBySKU(ctx context.Context, in *GetStockItemRequest, opts ...grpc.CallOption) (*StockItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockItemResponse)
	err := c.cc.Invoke(ctx, StocksService_GetStockItemBySKU_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stocksServiceClient) ListStockItemsByLocation(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*ListStockItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStockItemsResponse)
	err := c.cc.Invoke(ctx, StocksService_ListStockItemsByLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StocksServiceServer is the server API for StocksService service.
// All implementations must embed UnimplementedStocksServiceServer
// for forward compatibility.
type StocksServiceServer interface {
	AddStockItem(context.Context, *CreateStockItemRequest) (*GeneralResponse, error)
	DeleteStockItem(context.Context, *DeleteStockItemRequest) (*GeneralResponse, error)
	GetStockItemBySKU(context.Context, *GetStockItemRequest) (*StockItemResponse, error)
	ListStockItemsByLocation(context.Context, *FilterRequest) (*ListStockItemsResponse, error)
	mustEmbedUnimplementedStocksServiceServer()
}

// UnimplementedStocksServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStocksServiceServer struct{}

func (UnimplementedStocksServiceServer) AddStockItem(context.Context, *CreateStockItemRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStockItem not implemented")
}
func (UnimplementedStocksServiceServer) DeleteStockItem(context.Context, *DeleteStockItemRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStockItem not implemented")
}
func (UnimplementedStocksServiceServer) GetStockItemBySKU(context.Context, *GetStockItemRequest) (*StockItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockItemBySKU not implemented")
}
func (UnimplementedStocksServiceServer) ListStockItemsByLocation(context.Context, *FilterRequest) (*ListStockItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStockItemsByLocation not implemented")
}
func (UnimplementedStocksServiceServer) mustEmbedUnimplementedStocksServiceServer() {}
func (UnimplementedStocksServiceServer) testEmbeddedByValue()                       {}

// UnsafeStocksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StocksServiceServer will
// result in compilation errors.
type UnsafeStocksServiceServer interface {
	mustEmbedUnimplementedStocksServiceServer()
}

func RegisterStocksServiceServer(s grpc.ServiceRegistrar, srv StocksServiceServer) {
	// If the following call pancis, it indicates UnimplementedStocksServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StocksService_ServiceDesc, srv)
}

func _StocksService_AddStockItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServiceServer).AddStockItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StocksService_AddStockItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServiceServer).AddStockItem(ctx, req.(*CreateStockItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StocksService_DeleteStockItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStockItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServiceServer).DeleteStockItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StocksService_DeleteStockItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServiceServer).DeleteStockItem(ctx, req.(*DeleteStockItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StocksService_GetStockItemBySKU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServiceServer).GetStockItemBySKU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StocksService_GetStockItemBySKU_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServiceServer).GetStockItemBySKU(ctx, req.(*GetStockItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StocksService_ListStockItemsByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StocksServiceServer).ListStockItemsByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StocksService_ListStockItemsByLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StocksServiceServer).ListStockItemsByLocation(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StocksService_ServiceDesc is the grpc.ServiceDesc for StocksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StocksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocks.StocksService",
	HandlerType: (*StocksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStockItem",
			Handler:    _StocksService_AddStockItem_Handler,
		},
		{
			MethodName: "DeleteStockItem",
			Handler:    _StocksService_DeleteStockItem_Handler,
		},
		{
			MethodName: "GetStockItemBySKU",
			Handler:    _StocksService_GetStockItemBySKU_Handler,
		},
		{
			MethodName: "ListStockItemsByLocation",
			Handler:    _StocksService_ListStockItemsByLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocks.proto",
}
